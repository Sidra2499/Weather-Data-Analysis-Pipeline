# -*- coding: utf-8 -*-
"""Weather_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-lQFCTLleMghQ23MV_ePw3SFQouIKb83
"""

!pip install requests pandas matplotlib seaborn

import requests
import pandas as pd
from datetime import datetime

# API Key
API_KEY = "d57dc202e4c83abac81f9d8c32456bc8"
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"

# Cities to fetch
cities = ["Lahore", "Karachi", "Islamabad", "Faisalabad", "Sialkot", "Sheikhupura",
          "Peshawar", "Skardu", "Gilgit", "Hunza"]

# List to store results
weather_data = []

for city in cities:
    params = {
        "q": city,
        "appid": API_KEY,
        "units": "metric"
    }
    response = requests.get(BASE_URL, params=params)
    if response.status_code == 200:
        data = response.json()
        weather_data.append({
            "City": city,
            "Temperature (°C)": data["main"]["temp"],
            "Feels Like (°C)": data["main"]["feels_like"],
            "Humidity (%)": data["main"]["humidity"],
            "Wind Speed (m/s)": data["wind"]["speed"],
            "Weather": data["weather"][0]["description"],
            "Time": datetime.utcfromtimestamp(data["dt"]).strftime('%Y-%m-%d %H:%M:%S')
        })
    else:
        print(f"⚠️ Failed to fetch data for {city}")

# Convert to DataFrame
df = pd.DataFrame(weather_data)
print(df)

# Summary statistics
print("🔹 Average Temperature:", df["Temperature (°C)"].mean())
print("🔹 Max Temperature:", df["Temperature (°C)"].max())
print("🔹 Min Temperature:", df["Temperature (°C)"].min())

"""Data Visualization
-> Temperature Comparison Bar Chart
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.barplot(x="City", y="Temperature (°C)", data=df, palette="coolwarm")
plt.title("🌡️ Temperature by City")
plt.ylabel("Temperature (°C)")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""Weather Condition Pie Chart"""

plt.figure(figsize=(8, 8))
df["Weather"].value_counts().plot.pie(autopct='%1.1f%%', startangle=140)
plt.title("☁️ Weather Condition Distribution")
plt.ylabel("")
plt.show()

df.to_csv("live_weather_data.csv", index=False)
print("📁 Weather data saved as 'live_weather_data.csv'")